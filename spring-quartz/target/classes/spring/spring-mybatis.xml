<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter" lazy-init="true">
        <description>状态过滤器</description>
        <!--10秒还没执行完的SQL，记录为慢查询-->
        <property name="slowSqlMillis" value="10000"/>
        <property name="logSlowSql" value="true"/>
        <!--SQL合并配置-->
        <property name="mergeSql" value="true"/>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> 
		<property name="password" value="${jdbc.password}" /> 
		<property name="initialSize" value="${jdbc.initialSize}" /> 
	    <property name="minIdle" value="${jdbc.minIdle}" /> 
	    <property name="maxActive" value="${jdbc.maxActive}" /> 
	    <property name="maxWait" value="${jdbc.maxWait}" /> 
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" /> 
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" /> 
	    <property name="validationQuery" value="${jdbc.validationQuery}" /> 
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" /> 
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" /> 
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" /> 
	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> 
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> 
<!--	    <property name="logAbandoned" value="${jdbc.logAbandoned}" /> -->
	    <property name="filters" value="${jdbc.filters}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="proxyFilters">
	        <list>
	            <ref bean="stat-filter"/>
	        </list>
	    </property>
    </bean>

    <!-- session factory \ mybatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapper配置文件 -->
        <property name="mapperLocations" value="classpath*:com/libinyn/base/**/*.xml"/>
        <!-- <property name="plugins">
            <list>
                Mybatis自定义SQL分页拦截器
                <bean class="com.billionsfinance.crs.common.plugins.MybatisPaginationInterceptor"/>
            </list>
        </property> -->
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.libinyn.base.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 注解事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/> -->
    <!--拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="physical*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>

            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- Spring aop事务管理 -->
    <aop:config>
        <aop:advisor advice-ref="transactionAdvice"
                     pointcut="execution(* com.libinyn.base.service.impl..*.*(..))"/>
    </aop:config>

</beans>